{"version":3,"sources":["webpack:///./src/js/Meta.js","webpack:///./src/app.js","webpack:///./src/js/Blob.js","webpack:///./src/js/Ble.js"],"names":["__webpack_require__","Meta","p","width","height","_classCallCheck3","default","this","blobs","i","push","Blob","Math","random","myBLE","img","createImage","loadPixels","x","y","sum","length","xdif","ydif","d","sqrt","r","min","pixels","updatePixels","image","Xamp","map","sensorValues","Yamp","speed","update","num","max","MIN","MAX","parsed","parseInt","containerElement","document","getElementById","myMeta","P5","myFont","preload","loadFont","setup","createCanvas","windowWidth","windowHeight","colorMode","HSB","Ble","textFont","noStroke","textSize","textAlign","CENTER","window","chrome","webstore","runtime","alert","draw","clear","isConnected","fps","frameRate","fill","translate","text","toFixed","pop","touchStarted","connectAndStartNotify","windowResized","resizeCanvas","angle","PI","xspeed","cos","yspeed","sin","Xangle","Yangle","noFill","stroke","strokeWeight","ellipse","that","serviceUuid","P5ble","connect","gotCharacteristics","error","characteristics","console","log","onDisconnected","sensorCharacteristic","startNotifications","handleSensor","data","floor","getUint16"],"mappings":"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","file":"static/js/0.f9b7de064d920fa8a221.js","sourcesContent":["import Blob from './Blob.js'\n\nclass Meta {\n  constructor (p, width, height) {\n    this.blobs = []\n    this.width = width\n    this.height = height\n    for (let i = 0; i < 6; i++) {\n      this.blobs.push(new Blob(p, Math.random(0, width), p.random(0, height)))\n    }\n  }\n\n  update (p, myBLE) {\n    // let vOffset = p.windowHeight / 2 - visRadius\n    // let hOffset = p.windowWidth / 2 - visRadius\n    let img = p.createImage(this.height, this.width)\n    img.loadPixels()\n    for (let x = 0; x < this.width; x += 1) {\n      for (let y = 0; y < this.height; y += 1) {\n        let sum = 0\n        for (let i = 0; i < this.blobs.length; i++) {\n          let xdif = x - this.blobs[i].x - (this.width / 2)\n          let ydif = y - this.blobs[i].y - (this.height / 2)\n          let d = p.sqrt((xdif * xdif) + (ydif * ydif))\n          if (d <= this.blobs[i].r) {\n            sum += 10 * this.blobs[i].r / d\n          }\n        }\n        if (sum >= 200) {\n          sum = Math.min(sum, 255)\n          sum -= 200\n          sum *= 4\n          let i = (x + (y * this.width)) * 4\n          img.pixels[i] = 255\n          img.pixels[i + 1] = 254\n          img.pixels[i + 2] = 254\n          img.pixels[i + 3] = sum\n        }\n      }\n    }\n    img.updatePixels()\n    // img.resize(this.width * 2, this.height * 2)\n    p.image(img, (p.width - this.width) / 2, (p.height - this.height) / 2)\n    // p.image(pg, -pg.width / 2, -pg.width / 2)\n    for (let i = 0; i < this.blobs.length; i++) {\n      this.blobs[i].Xamp = p.map(myBLE.sensorValues[0], 100, 16384, 2, this.width * 0.65)\n      this.blobs[i].Yamp = p.map(myBLE.sensorValues[1], 100, 16384, 2, this.height * 0.65)\n      this.blobs[i].r = 30 + (myBLE.sensorValues[1] + myBLE.sensorValues[0]) * 0.025\n      this.blobs[i].speed = (myBLE.sensorValues[0] / 16384 + myBLE.sensorValues[1] / 16384) * 0.03\n      this.blobs[i].update(p)\n    }\n  }\n\n  minMax (num, min, max) {\n    const MIN = min || 1\n    const MAX = max || 20\n    const parsed = parseInt(num)\n    return Math.min(Math.max(parsed, MIN), MAX)\n  }\n\n  draw (p) {\n\n  }\n}\nexport default Meta\n","import './css/style.css'\nimport P5 from 'p5'\nimport P5ble from 'p5ble'\nimport Ble from './js/Ble'\nimport Meta from './js/Meta.js'\n\nconst containerElement = document.getElementById('p5-container')\nlet myBLE\nlet isConnected = false\nlet visRadius = 100\nlet myMeta\n// todo: webpack is building with html file paths defaulting to root. This should be local to make it easer to host demos with github pages\n// https://codepen.io/mnmxmx/pen/VjjvEq\n\nconst sketch = (p) => {\n  let x = 100\n  let y = 100\n  let myFont\n  p.preload = function () {\n    myFont = p.loadFont('static/fonts/inconsolata.otf')\n  }\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth, p.windowHeight)\n    p.colorMode(p.HSB)\n    myBLE = new Ble()\n    p.textFont(myFont)\n    p.noStroke()\n    p.textSize(p.width / 60)\n    myMeta = new Meta(p, 350, 350)\n    p.textAlign(p.CENTER, p.CENTER)\n    let isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime)\n    if (!isChrome) {\n      window.alert('BLE may not work in your browser. Use Chrome or check for a list of compatible browsers here: https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API')\n    }\n  }\n\n  p.draw = function () {\n    p.clear()\n    if (myBLE.isConnected) {\n      drawGame(p)\n      let fps = p.frameRate()\n      p.fill(255)\n      p.translate(30, p.height - 10)\n      p.textSize(10)\n      p.text('FPS: ' + fps.toFixed(2), 0, 0)\n    } else {\n      startScreen(p)\n    }\n  }\n\n  p.touchStarted = function () {\n    myBLE.connectAndStartNotify()\n  }\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth, p.windowHeight)\n  }\n\n  function drawGame (p) {\n    myMeta.update(p, myBLE)\n  }\n  function startScreen (p) {\n    p.push()\n    p.translate(p.windowWidth / 2, p.windowHeight / 2)\n    p.fill(255)\n    p.text('No BLE Connection, click anywhere to pair BLE device', 0, 0)\n    p.pop()\n  }\n}\n\nlet PFIVE = new P5(sketch, containerElement)\n","class Blob {\n  constructor (p, x, y) {\n    this.x = x\n    this.y = y\n    let angle = p.random(0, 2 * p.PI)\n    this.xspeed = p.random(2, 5) * Math.cos(angle)\n    this.yspeed = p.random(2, 5) * Math.sin(angle)\n    this.r = p.random(10, 30)\n    this.Xangle = p.random(p.PI)\n    this.Yangle = p.random(p.PI)\n    this.speed = 0.003\n    this.Xamp = p.random(120)\n    this.Yamp = p.random(120)\n  }\n\n  update (p) {\n    this.Xangle += this.speed\n    this.Yangle += this.speed\n    this.x = p.sin(this.Xangle) * this.Xamp\n    this.y = p.sin(this.Yangle) * this.Yamp\n  }\n  draw (p) {\n    p.noFill()\n    p.stroke(0)\n    p.strokeWeight(4)\n    p.ellipse(this.x, this.y, this.r * 2, this.r * 2)\n  }\n}\nexport default Blob\n","import P5 from 'p5'\nimport P5ble from 'p5ble'\nlet that\nclass Ble {\n  constructor () {\n    this.serviceUuid = 'ff9c1e42-7b32-11ea-bc55-0242ac130003'\n    this.myBLE = new P5ble()\n    this.isConnected = false\n    this.sensorValues = []\n    this.sensorValues[0] = 16384\n    this.sensorValues[1] = 16384\n    this.sensorValues[2] = 16384\n    this.sensorValues[3] = 16384\n    that = this // set a reference to the instance this\n  }\n\n  connectAndStartNotify () {\n    // Connect to a device by passing the service UUID\n    this.myBLE.connect(this.serviceUuid, this.gotCharacteristics)\n  }\n  gotCharacteristics (error, characteristics) {\n    // A function that will be called once got characteristics\n    if (error) {\n      console.log('error: ', error)\n    } else {\n      console.log(characteristics[0])\n      // Check if myBLE is connected\n      console.log('check connection.')\n      that.isConnected = that.myBLE.isConnected()\n\n      // Add a event handler when the device is disconnected\n      that.myBLE.onDisconnected(that.onDisconnected)\n\n      for (let i = 0; i < characteristics.length; i++) {\n        if (i === 0) {\n          const sensorCharacteristic = characteristics[i]\n          // Set datatype to 'custom', p5.ble.js won't parse the data, will return data as it is.\n\n          that.myBLE.startNotifications(sensorCharacteristic, that.handleSensor, 'custom')\n          console.log('characteristics: 1')\n        } else if (i === 1) {\n          console.log('characteristics: 2')\n        } else if (i === 2) {\n          console.log('characteristics: 3')\n        } else {\n          console.log(\"characteristic doesn't match.\")\n        }\n      }\n    }\n  }\n\n  onDisconnected () {\n    console.log('Device was disconnected.')\n    this.isConnected = false\n  }\n\n  handleSensor (data) {\n    let factor = 0.8\n    // weighted moving average of values\n    that.sensorValues[1] = Math.floor(that.sensorValues[1] * factor)\n    that.sensorValues[0] = Math.floor(that.sensorValues[0] * factor)\n    that.sensorValues[2] = Math.floor(that.sensorValues[2] * factor)\n    that.sensorValues[3] = Math.floor(that.sensorValues[3] * factor)\n    that.sensorValues[0] += Math.floor(data.getUint16(0, true) * (1.0 - factor))\n    that.sensorValues[1] += Math.floor(data.getUint16(2, true) * (1.0 - factor))\n    that.sensorValues[2] += Math.floor(data.getUint16(4, true) * (1.0 - factor))\n    that.sensorValues[3] += Math.floor(data.getUint16(6, true) * (1.0 - factor))\n  }\n}\nexport default Ble\n"],"sourceRoot":""}