{"version":3,"sources":["webpack:///./src/app.js","webpack:///./src/js/Ble.js"],"names":["__webpack_require__","i","containerElement","document","getElementById","P5","p","myFont","myBLE","preload","loadFont","setup","createCanvas","windowWidth","windowHeight","Ble","textFont","textSize","width","fill","noStroke","textAlign","CENTER","window","chrome","webstore","runtime","alert","draw","clear","isConnected","spacing","sensorValues","length","translate","push","radius","map","ellipse","text","pop","touchStarted","connectAndStartNotify","windowResized","resizeCanvas","that","_classCallCheck3","default","this","serviceUuid","P5ble","connect","gotCharacteristics","error","characteristics","console","log","onDisconnected","sensorCharacteristic","startNotifications","handleSensor","data","Math","floor","getUint16"],"mappings":"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","file":"static/js/0.8cf4d782d112c06cb046.js","sourcesContent":["import './css/style.css'\nimport P5 from 'p5'\nimport Ble from './js/Ble'\n// todo: webpack is building with html file paths defaulting to root. This should be local to make it easer to host demos with github pages\nconst containerElement = document.getElementById('p5-container')\n\nconst sketch = (p) => {\n  let x = 100\n  let y = 100\n  let myFont\n  let myBLE\n  const serviceUuid = 'ff9c1e42-7b32-11ea-bc55-0242ac130003'\n  let sensorCharacteristic\n  let isConnected = false\n  p.preload = function () {\n    myFont = p.loadFont('static/fonts/inconsolata.otf')\n  }\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth, p.windowHeight)\n    myBLE = new Ble()\n    p.textFont(myFont)\n    p.textSize(p.width / 60)\n    p.fill(255)\n    p.noStroke()\n    p.textAlign(p.CENTER, p.CENTER)\n    let isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime)\n    if (!isChrome) {\n      window.alert('BLE may not work in your browser. Use Chrome or check for a list of compatible browsers here: https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API')\n    }\n  }\n\n  p.draw = function () {\n    p.clear()\n    if (myBLE.isConnected) {\n      // p.normalMaterial()\n      let spacing = p.windowWidth / myBLE.sensorValues.length\n      p.translate((spacing / 2), p.windowHeight / 2)\n      for (let i = 0; i < myBLE.sensorValues.length; i++) {\n        p.push()\n        p.translate(spacing * i, 0)\n        let radius = p.map(myBLE.sensorValues[i], 0, 16384, 10, spacing * 0.8)\n        p.ellipse(0, 0, radius, radius)\n        p.text(myBLE.sensorValues[i], 0, spacing / 3 * 1.20)\n        p.pop()\n      }\n    } else {\n      p.translate(p.windowWidth / 2, p.windowHeight / 2)\n      p.text('No BLE Connection, click anywhere to pair BLE device', 0, 0)\n    }\n  }\n\n  p.touchStarted = function () {\n    myBLE.connectAndStartNotify()\n  }\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth, p.windowHeight)\n  }\n}\n\nlet PFIVE = new P5(sketch, containerElement)\n","import P5 from 'p5'\nimport P5ble from 'p5ble'\nlet that\nclass Ble {\n  constructor () {\n    this.serviceUuid = 'ff9c1e42-7b32-11ea-bc55-0242ac130003'\n    this.myBLE = new P5ble()\n    this.isConnected = false\n    this.sensorValues = []\n    this.sensorValues[0] = 16384\n    this.sensorValues[1] = 16384\n    this.sensorValues[2] = 16384\n    this.sensorValues[3] = 16384\n    that = this // set a reference to the instance this\n  }\n\n  connectAndStartNotify () {\n    // Connect to a device by passing the service UUID\n    this.myBLE.connect(this.serviceUuid, this.gotCharacteristics)\n  }\n  gotCharacteristics (error, characteristics) {\n    // A function that will be called once got characteristics\n    if (error) {\n      console.log('error: ', error)\n    } else {\n      console.log(characteristics[0])\n      // Check if myBLE is connected\n      console.log('check connection.')\n      that.isConnected = that.myBLE.isConnected()\n\n      // Add a event handler when the device is disconnected\n      that.myBLE.onDisconnected(that.onDisconnected)\n\n      for (let i = 0; i < characteristics.length; i++) {\n        if (i === 0) {\n          const sensorCharacteristic = characteristics[i]\n          // Set datatype to 'custom', p5.ble.js won't parse the data, will return data as it is.\n\n          that.myBLE.startNotifications(sensorCharacteristic, that.handleSensor, 'custom')\n          console.log('characteristics: 1')\n        } else if (i === 1) {\n          console.log('characteristics: 2')\n        } else if (i === 2) {\n          console.log('characteristics: 3')\n        } else {\n          console.log(\"characteristic doesn't match.\")\n        }\n      }\n    }\n  }\n\n  onDisconnected () {\n    console.log('Device was disconnected.')\n    this.isConnected = false\n  }\n\n  handleSensor (data) {\n    let factor = 0.8\n    // weighted moving average of values\n    that.sensorValues[1] = Math.floor(that.sensorValues[1] * factor)\n    that.sensorValues[0] = Math.floor(that.sensorValues[0] * factor)\n    that.sensorValues[2] = Math.floor(that.sensorValues[2] * factor)\n    that.sensorValues[3] = Math.floor(that.sensorValues[3] * factor)\n    that.sensorValues[0] += Math.floor(data.getUint16(0, true) * (1.0 - factor))\n    that.sensorValues[1] += Math.floor(data.getUint16(2, true) * (1.0 - factor))\n    that.sensorValues[2] += Math.floor(data.getUint16(4, true) * (1.0 - factor))\n    that.sensorValues[3] += Math.floor(data.getUint16(6, true) * (1.0 - factor))\n  }\n}\nexport default Ble\n"],"sourceRoot":""}