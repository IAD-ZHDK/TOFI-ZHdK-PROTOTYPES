{"version":3,"sources":["webpack:///./src/app.js"],"names":["__webpack_require__","i","containerElement","document","getElementById","sensorCharacteristic","sensorValues","myBLE","isConnected","gotCharacteristics","error","characteristics","console","log","length","onDisconnected","startNotifications","handleSensor","data","Math","floor","getUint16","P5","p","myFont","preload","loadFont","setup","createCanvas","windowWidth","windowHeight","background","P5ble","textFont","textSize","width","textAlign","CENTER","window","chrome","webstore","runtime","alert","draw","spacing","push","translate","fill","radius","map","ellipse","text","pop","touchStarted","connect","windowResized","resizeCanvas"],"mappings":"8GAAAA,EAAA,QACA,QAAAA,EAAA,SAAAC,EAAA,EACAD,EAAA,4DACA,IAAME,EAAmBC,SAASC,eAAe,gBAE7CC,SACAC,KACAC,SACAC,KAsEJ,SAASC,EAAoBC,EAAOC,GAC9BD,GAAOE,QAAQC,IAAI,UAAWH,GAClCE,QAAQC,IAAIF,EAAgBG,QAE5BN,EAAcD,EAAMC,cAGpBD,EAAMQ,eAAeA,GAErB,IAAK,IAAId,EAAI,EAAGA,EAAIU,EAAgBG,OAAQb,IAChC,IAANA,GACFI,EAAuBM,EAAgBV,GAEvCM,EAAMS,mBAAmBX,EAAsBY,EAAc,UAC7DL,QAAQC,IAAI,uBACG,IAANZ,GACTI,EAAuBM,EAAgBV,GAEvCW,QAAQC,IAAI,uBACG,IAANZ,EACTW,QAAQC,IAAI,sBAEZD,QAAQC,IAAI,iCAKlB,SAASE,IACPH,QAAQC,IAAI,4BACZL,KAgCF,SAASS,EAAcC,GAErBZ,EAAa,GAAKa,KAAKC,MAAwB,GAAlBd,EAAa,IAC1CA,EAAa,GAAKa,KAAKC,MAAwB,GAAlBd,EAAa,IAC1CA,EAAa,GAAKa,KAAKC,MAAwB,GAAlBd,EAAa,IAC1CA,EAAa,IAAMa,KAAKC,MAAgC,GAA1BF,EAAKG,UAAU,GAAE,IAC/Cf,EAAa,IAAMa,KAAKC,MAAgC,GAA1BF,EAAKG,UAAU,GAAE,IAC/Cf,EAAa,IAAMa,KAAKC,MAAgC,GAA1BF,EAAKG,UAAU,GAAE,IAGrC,IAAIC,WA3ID,SAACC,GACd,IAEIC,SACJD,EAAEE,QAAU,WACVD,EAASD,EAAEG,SAAS,iCAGtBH,EAAEI,MAAQ,WACRrB,EAAa,GAAK,MAClBA,EAAa,GAAK,MAClBA,EAAa,GAAK,MAClBiB,EAAEK,aAAaL,EAAEM,YAAaN,EAAEO,cAChCP,EAAEQ,WAAW,GACbxB,EAAQ,IAAIyB,UACZT,EAAEU,SAAST,GACXD,EAAEW,SAASX,EAAEY,MAAQ,IACrBZ,EAAEa,UAAUb,EAAEc,OAAQd,EAAEc,QACPC,OAAOC,SAAaD,OAAOC,OAAOC,UAAcF,OAAOC,OAAOE,UAE7EH,OAAOI,MAAM,qKAIjBnB,EAAEoB,KAAO,WACP,GAAInC,EAAa,CACfe,EAAEQ,WAAW,GAGb,IADA,IAAIa,EAAUrB,EAAEM,YAAcvB,EAAaQ,OAClCb,EAAI,EAAGA,EAAIK,EAAaQ,OAAQb,IAAK,CAC5CsB,EAAEsB,OACFtB,EAAEuB,UAAWvB,EAAEM,YAAc,EAAKe,EAASrB,EAAEO,aAAe,GAC5DP,EAAEuB,UAAUF,EAAU3C,EAAG,GACzBsB,EAAEwB,KAAK,KACP,IAAIC,EAASzB,EAAE0B,IAAI3C,EAAaL,GAAI,EAAG,MAAO,GAAI2C,EAAU,GAC5DrB,EAAE2B,QAAQ,EAAG,EAAGF,EAAQA,GACxBzB,EAAE4B,KAAK7C,EAAaL,GAAI,EAAG2C,EAAU,EAAI,KACzCrB,EAAE6B,YAGJ7B,EAAEQ,WAAW,IAAK,EAAG,GACrBR,EAAEuB,UAAUvB,EAAEM,YAAc,EAAGN,EAAEO,aAAe,GAChDP,EAAE4B,KAAK,uDAAwD,EAAG,IAItE5B,EAAE8B,aAAe,WAUjB9C,EAAM+C,QA9DY,uCA8DS7C,IAP3Bc,EAAEgC,cAAgB,WAChBhC,EAAEiC,aAAajC,EAAEM,YAAaN,EAAEO,iBAyFT5B","file":"static/js/0.80b9789aa3f1ec34ce9a.js","sourcesContent":["import './css/style.css'\nimport P5 from 'p5'\nimport P5ble from 'p5ble'\nconst containerElement = document.getElementById('p5-container')\nconst serviceUuid = 'ff9c1e42-7b32-11ea-bc55-0242ac130003'\nlet sensorCharacteristic\nlet sensorValues = []\nlet myBLE\nlet isConnected = false\n\nconst sketch = (p) => {\n  let x = 100\n  let y = 100\n  let myFont\n  p.preload = function () {\n    myFont = p.loadFont('static/fonts/inconsolata.otf')\n  }\n\n  p.setup = function () {\n    sensorValues[0] = 65534\n    sensorValues[1] = 65534\n    sensorValues[2] = 65534\n    p.createCanvas(p.windowWidth, p.windowHeight)\n    p.background(0)\n    myBLE = new P5ble()\n    p.textFont(myFont)\n    p.textSize(p.width / 60)\n    p.textAlign(p.CENTER, p.CENTER)\n    let isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime)\n    if (!isChrome) {\n      window.alert('BLE may not work in your browser. Use Chrome or check for a list of compatible browsers here: https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API')\n    }\n  }\n\n  p.draw = function () {\n    if (isConnected) {\n      p.background(0)\n      // p.normalMaterial()\n      let spacing = p.windowWidth / sensorValues.length\n      for (let i = 0; i < sensorValues.length; i++) {\n        p.push()\n        p.translate((p.windowWidth / 2) - spacing, p.windowHeight / 2)\n        p.translate(spacing * i, 0)\n        p.fill(255)\n        let radius = p.map(sensorValues[i], 0, 65534, 10, spacing / 3)\n        p.ellipse(0, 0, radius, radius)\n        p.text(sensorValues[i], 0, spacing / 3 * 1.20)\n        p.pop()\n      }\n    } else {\n      p.background(255, 0, 0)\n      p.translate(p.windowWidth / 2, p.windowHeight / 2)\n      p.text('No BLE Connection, click anywhere to pair BLE device', 0, 0)\n    }\n  }\n\n  p.touchStarted = function () {\n    connectAndStartNotify()\n  }\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth, p.windowHeight)\n  }\n}\n\nfunction connectAndStartNotify () {\n  // Connect to a device by passing the service UUID\n  myBLE.connect(serviceUuid, gotCharacteristics)\n  // You can also filter devices by name\n  // myBLE.connect({\n  //   filters: [{\n  //     services: [serviceUuid],\n  //   }, {\n  //     name: 'ArduinoIMU'\n  //   }]\n  // }, gotCharacteristics)\n}\n\n// A function that will be called once got characteristics\nfunction gotCharacteristics (error, characteristics) {\n  if (error) console.log('error: ', error)\n  console.log(characteristics.length)\n  // Check if myBLE is connected\n  isConnected = myBLE.isConnected()\n\n  // Add a event handler when the device is disconnected\n  myBLE.onDisconnected(onDisconnected)\n\n  for (let i = 0; i < characteristics.length; i++) {\n    if (i === 0) {\n      sensorCharacteristic = characteristics[i]\n      // Set datatype to 'custom', p5.ble.js won't parse the data, will return data as it is.\n      myBLE.startNotifications(sensorCharacteristic, handleSensor, 'custom')\n      console.log('characteristics: 1')\n    } else if (i === 1) {\n      sensorCharacteristic = characteristics[i]\n      // myBLE.startNotifications(sensorCharacteristic, handlebyte, 'custom')\n      console.log('characteristics: 2')\n    } else if (i === 2) {\n      console.log('characteristics: 3')\n    } else {\n      console.log(\"characteristic doesn't match.\")\n    }\n  }\n}\n\nfunction onDisconnected () {\n  console.log('Device got disconnected.')\n  isConnected = false\n}\n\n// A function that will be called once got characteristics\n/*\nfunction handlebyte (data) {\n  let byteArray = [0, 0, 0, 0]\n  let btnData = (data.getUint8(0, true)).toString(2)\n  for (let i = 0; i < byteArray.length; i++) {\n    byteArray[i] = btnData & 1\n    console.log(i + '_' + byteArray[i])\n    btnData = btnData >> 1\n  }\n  console.log('0')\n  if (byteArray[0] === 1) {\n    // console.log(byteArray[0])\n    color = '#FFF3D9'\n  }\n  if (byteArray[1] === 1) {\n    // console.log(byteArray[1])\n    color = '#FFE6B3'\n  }\n  if (byteArray[2] === 1) {\n    // console.log(byteArray[2])\n    color = '#47AAD9'\n  }\n  if (byteArray[3] === 1) {\n    // console.log(byteArray[3])\n    color = '#2E6E8D'\n  }\n}\n*/\nfunction handleSensor (data) {\n  // weighted moving average of values\n  sensorValues[0] = Math.floor(sensorValues[0] * 0.8)\n  sensorValues[1] = Math.floor(sensorValues[1] * 0.8)\n  sensorValues[2] = Math.floor(sensorValues[2] * 0.8)\n  sensorValues[0] += Math.floor(data.getUint16(0, true) * 0.2)\n  sensorValues[1] += Math.floor(data.getUint16(2, true) * 0.2)\n  sensorValues[2] += Math.floor(data.getUint16(4, true) * 0.2)\n}\n\nlet PFIVE = new P5(sketch, containerElement)\n"],"sourceRoot":""}